problem 1

class Solution {
    public int findNumberOfLIS(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;

        int[] length = new int[n];
        int[] count = new int[n];  
        Arrays.fill(length, 1);
        Arrays.fill(count, 1);

        int maxLength = 1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    if (length[j] + 1 > length[i]) {
                        length[i] = length[j] + 1;
                        count[i] = count[j];
                    } else if (length[j] + 1 == length[i]) {
                        count[i] += count[j];
                    }
                }
            }
            maxLength = Math.max(maxLength, length[i]);
        }

        int result = 0;
        for (int i = 0; i < n; i++) {
            if (length[i] == maxLength) {
                result += count[i];
            }
        }

        return result;
    }
}


problem 2


class Solution {
    public boolean isMatch(String s, String p) {
        int n= s.length();
        int m= p.length();
        boolean[][] dp=new boolean[n+1][m+1];
        dp[0][0]= true;
        for(int i=1;i<=m;i++){
            if(p.charAt(i-1)=='*'){
                dp[0][i]=dp[0][i-1];
            }
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
              char sc= s.charAt(i-1);
              char pc= p.charAt(j-1);
              if(pc==sc||pc=='?'){
                dp[i][j]=dp[i-1][j-1];
              }
              else if(pc=='*'){
                dp[i][j]=dp[i-1][j]||dp[i][j-1];
              }
            }
        }
        return dp[n][m];
    }
}
