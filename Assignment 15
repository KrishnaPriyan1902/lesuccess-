problem 1
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];
        for (char[] row : board) Arrays.fill(row, '.');
        backtrack(0, board, result, new HashSet<>(), new HashSet<>(), new HashSet<>());
        return result;
    }

    private void backtrack(int row, char[][] board, List<List<String>> result,
                           Set<Integer> cols, Set<Integer> diag1, Set<Integer> diag2) {
        int n = board.length;
        if (row == n) {
            List<String> temp = new ArrayList<>();
            for (char[] r : board)
                temp.add(new String(r));
            result.add(temp);
            return;
        }

        for (int col = 0; col < n; col++) {
            int d1 = row - col;
            int d2 = row + col;
            if (cols.contains(col) || diag1.contains(d1) || diag2.contains(d2)) continue;

            cols.add(col); 
            diag1.add(d1); 
            diag2.add(d2);
            board[row][col] = 'Q';

            backtrack(row + 1, board, result, cols, diag1, diag2);

            board[row][col] = '.';
            cols.remove(col); 
            diag1.remove(d1);
            diag2.remove(d2);
        }
    }
}

problem 2

import java.util.*;

public class RatInMaze {
    static List<String> result;
    static boolean[][] visited;
    static int[][] directions = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}};
    static char[] dirChar = {'D', 'L', 'R', 'U'};

    public static List<String> findPath(int[][] maze, int n) {
        result = new ArrayList<>();
        visited = new boolean[n][n];
        if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) return result;

        visited[0][0] = true;
        backtrack(0, 0, "", maze, n);
        return result;
    }

    private static void backtrack(int x, int y, String path, int[][] maze, int n) {
        if (x == n - 1 && y == n - 1) {
            result.add(path);
            return;
        }

        for (int i = 0; i < 4; i++) {
            int newX = x + directions[i][0];
            int newY = y + directions[i][1];

            if (newX >= 0 && newY >= 0 && newX < n && newY < n &&
                maze[newX][newY] == 1 && !visited[newX][newY]) {
                visited[newX][newY] = true;
                backtrack(newX, newY, path + dirChar[i], maze, n);
                visited[newX][newY] = false;
            }
        }
    }

    // Example
    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };
        System.out.println(findPath(maze, 4));
    }
}

problem 3



class Solution {
    private static final String[] KEYPAD = {
        "", "", "abc", "def", "ghi",
        "jkl", "mno", "pqrs", "tuv", "wxyz"
    };

    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if (digits == null || digits.isEmpty()) return result;

        backtrack(digits, 0, new StringBuilder(), result);
        return result;
    }

    private void backtrack(String digits, int index, StringBuilder path, List<String> result) {
        if (index == digits.length()) {
            result.add(path.toString());
            return;
        }

        String letters = KEYPAD[digits.charAt(index) - '0'];
        for (char c : letters.toCharArray()) {
            path.append(c);
            backtrack(digits, index + 1, path, result);
            path.deleteCharAt(path.length() - 1);
        }
    }
}
